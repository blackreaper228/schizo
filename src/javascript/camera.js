import '../index.css'
import { initCursor } from '../javascript/cursor.js'

import * as THREE from 'three'
import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js'

import HDRI from '../assets/HDR_blue_nebulae-1.hdr'
import monkeyModel from '../models/monkey.glb'
import schizoLogo from '../models/schizo_logo.glb'

// cursor

document.addEventListener('DOMContentLoaded', () => {
  initCursor()
})

// three.js
const raycaster = new THREE.Raycaster()
const mouse = new THREE.Vector2()
const target = new THREE.Vector3()

let scene, camera, renderer, model
let mouseX = 0,
  mouseY = 0

const renderWidth = 1348
const renderHeight = 266

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω—ã

function init() {
  scene = new THREE.Scene()
  // scene.background = 0xffffff

  camera = new THREE.PerspectiveCamera(40, renderWidth / renderHeight, 0.1, 100)
  camera.position.set(0, 0, 5)

  renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true })
  renderer.setSize(renderWidth, renderHeight)
  document.body.appendChild(renderer.domElement)

  // –°–≤–µ—Ç
  const light = new THREE.DirectionalLight(0xffffff, 1)
  light.position.set(2, 2, 5)
  scene.add(light)

  const redLight = new THREE.DirectionalLight(0xff0000, 2)
  redLight.position.set(-2, -2, 3)
  scene.add(redLight)

  // –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
  const loader = new GLTFLoader()
  loader.load(schizoLogo, (gltf) => {
    model = gltf.scene
    model.scale.set(0.5, 0.5, 0.5)
    model.position.set(0, 0, 0) // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
    scene.add(model)
  })

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º—ã—à–∏
  document.addEventListener('mousemove', onMouseMove)

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–Ω–∞
  window.addEventListener('resize', onWindowResize)

  animate()
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
function onMouseMove(event) {
  const rect = renderer.domElement.getBoundingClientRect()

  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫—É—Ä—Å–æ—Ä–∞ (–æ—Ç -1 –¥–æ 1)
  mouse.x = ((event.clientX - rect.left) / renderWidth) * 2 - 1
  mouse.y = -((event.clientY - rect.top) / renderHeight) * 2 + 1

  // –£–º–µ–Ω—å—à–∞–µ–º –∞–º–ø–ª–∏—Ç—É–¥—É –ø–æ–≤–æ—Ä–æ—Ç–∞ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 0.5 - –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å)
  mouse.x *= 0.05
  mouse.y *= 0.1

  // –°–æ–∑–¥–∞—ë–º –ª—É—á –æ—Ç –∫–∞–º–µ—Ä—ã –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
  raycaster.setFromCamera(mouse, camera)

  // –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–∫—É –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å –ø–ª–æ—Å–∫–æ—Å—Ç—å—é –ø–µ—Ä–µ–¥ –º–æ–¥–µ–ª—å—é
  const plane = new THREE.Plane(new THREE.Vector3(0, 0, 1), -2)
  raycaster.ray.intersectPlane(plane, target)
}

// –ê–Ω–∏–º–∞—Ü–∏—è
function animate() {
  requestAnimationFrame(animate)

  if (model) {
    model.lookAt(target) // üîπ –¢–µ–ø–µ—Ä—å –º–æ–¥–µ–ª—å —Å–º–æ—Ç—Ä–∏—Ç —Ç–æ—á–Ω–æ –≤ —Ç–æ—á–∫—É –ø–µ—Ä–µ–¥ –Ω–µ–π
  }

  renderer.render(scene, camera)
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–Ω–∞
function onWindowResize() {
  const aspectRatio = renderWidth / renderHeight

  camera.aspect = aspectRatio
  camera.updateProjectionMatrix()

  // –í–º–µ—Å—Ç–æ window.innerWidth / window.innerHeight –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
  renderer.setSize(renderWidth, renderHeight)
}

init()
