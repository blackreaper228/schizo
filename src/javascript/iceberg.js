import p5 from 'p5'
import '../index.css'

import burgerMenu from './burgerMenu.js'
import searchbarMobile from './searchbarMobile.js'
import navBtn from './navbarDropdown.js'
import navBtn2 from './navbarDropdown2.js'

import goBack from './goBack.js'
import titleElements from './data-text.js'

import icebergImgPic from '../images/iceberg/Q_CanvasTestPic.jpg'
import Inter from '../fonts/inter/Inter_24pt-BoldItalic.ttf'

let icebergImg, userImg
let input
let textGroups = {} // –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –ø–æ –∏–Ω–ø—É—Ç–∞–º
let myFont

let uploadedImages = [] // üî• –•—Ä–∞–Ω–∏–º –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Ö —É—Ä–æ–≤–Ω—è–º–∏

const sketch = (p) => {
  p.preload = () => {
    icebergImg = p.loadImage(icebergImgPic) // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–π—Å–±–µ—Ä–≥
    myFont = p.loadFont(Inter) // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
  }

  p.setup = () => {
    const canvas = p.createCanvas(icebergImg.width, icebergImg.height)
    const canvasContainer = document.querySelector('.Q_CanvasPic')

    if (canvasContainer) {
      canvas.parent(canvasContainer)
    } else {
      console.error('–≠–ª–µ–º–µ–Ω—Ç —Å –∫–ª–∞—Å—Å–æ–º Q_CanvasPic –Ω–µ –Ω–∞–π–¥–µ–Ω.')
    }

    p.image(icebergImg, 0, 0)
    input = p.createFileInput(handleFile)
    input.hide()

    const downloadButton = document.querySelector(
      '.A_IcebergResultActionsDownload'
    )
    if (downloadButton) {
      downloadButton.addEventListener('click', saveImage)
    } else {
      console.error(
        '–≠–ª–µ–º–µ–Ω—Ç —Å –∫–ª–∞—Å—Å–æ–º A_IcebergResultActionsDownload –Ω–µ –Ω–∞–π–¥–µ–Ω.'
      )
    }

    // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –Ω–æ–º–µ—Ä–∞–º 01-07 –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
    for (let i = 1; i <= 7; i++) {
      addTextHandler(`icebergInput0${i}`, i - 1)
      addUndoHandler(`Undo0${i}`, `icebergInput0${i}`)
      addUploadHandler(`AddPicBtn0${i}`)
    }

    // üî• –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ–≥–æ
    const deleteButton = document.querySelector('.A_IcebergResultActionsDelete')
    if (deleteButton) {
      deleteButton.addEventListener('click', () => {
        // 1Ô∏è‚É£ –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã
        textGroups = {}

        // 2Ô∏è‚É£ –û—á–∏—â–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        uploadedImages = []

        // 3Ô∏è‚É£ –°–±—Ä–∞—Å—ã–≤–∞–µ–º background-image —É –≤—Å–µ—Ö AddPicBtn
        document.querySelectorAll('[id^="AddPicBtn0"]').forEach((btn) => {
          btn.style.backgroundImage = '' // –£–±–∏—Ä–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
        })

        // 4Ô∏è‚É£ –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞–Ω–≤–∞—Å —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        p.clear()
        p.image(icebergImg, 0, 0)
      })
    } else {
      console.error('–≠–ª–µ–º–µ–Ω—Ç —Å –∫–ª–∞—Å—Å–æ–º A_IcebergResultActionsDelete –Ω–µ –Ω–∞–π–¥–µ–Ω.')
    }
  }

  p.draw = () => {
    p.background(255)
    p.image(icebergImg, 0, 0)

    // üî• –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–∞ –∏—Ö —É—Ä–æ–≤–Ω—è—Ö
    uploadedImages.forEach(({ img, y }) => {
      let x = icebergImg.width - 66 // üî• –§–∏–∫—Å–∏—Ä—É–µ–º –∫ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é
      p.image(img, x, y)
    })

    // üî• –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç—ã –∏–∑ textGroups
    Object.values(textGroups).forEach((group) => {
      group.forEach((t) => {
        p.textFont(myFont)
        p.textSize(9)
        p.textStyle(p.ITALIC)
        p.textAlign(p.LEFT, p.TOP)

        for (let i = 8; i > 0; i--) {
          let alpha = 60 - i * 5
          p.fill(0, 0, 0, alpha)
          p.noStroke()
          p.text(t.text, t.x + i, t.y + i)
          p.text(t.text, t.x - i, t.y - i)
        }

        p.fill(255, 255, 0)
        p.stroke(255, 0, 0)
        p.strokeWeight(2)
        p.text(t.text, t.x, t.y)
      })
    })
  }

  // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (—Ç–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É)
  function handleFile(file) {
    if (file.type === 'image') {
      const targetBtnId = input.elt.dataset.target
      const level = parseInt(targetBtnId.replace('AddPicBtn0', ''), 10) || 1
      const offsetY = (level - 1) * 71 // –°–º–µ—â–µ–Ω–∏–µ –≤–Ω–∏–∑ –Ω–∞ 71px –∑–∞ —É—Ä–æ–≤–µ–Ω—å

      p.loadImage(file.data, (loadedImg) => {
        const imgSize = Math.min(loadedImg.width, loadedImg.height)
        const xOffset = (loadedImg.width - imgSize) / 2
        const yOffset = (loadedImg.height - imgSize) / 2

        const croppedImg = loadedImg.get(xOffset, yOffset, imgSize, imgSize)
        croppedImg.resize(66, 66)

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤ —Å –µ–≥–æ —É—Ä–æ–≤–Ω–µ–º (—á—Ç–æ–±—ã –æ–Ω–æ —Ä–∏—Å–æ–≤–∞–ª–æ—Å—å –≤ `draw()`)
        uploadedImages.push({ img: croppedImg, y: offsetY })

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ–Ω –∫–Ω–æ–ø–∫–∏
        const uploadPicEl = document.getElementById(targetBtnId)
        if (uploadPicEl) {
          uploadPicEl.style.backgroundImage = `url(${croppedImg.canvas.toDataURL()})`
          uploadPicEl.style.backgroundSize = 'cover'
        }
      })
    }
  }

  function saveImage() {
    p.saveCanvas('iceberg-final', 'png')
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
  function addTextHandler(inputId, index) {
    const textInput = document.getElementById(inputId)
    if (!textInput) {
      console.error(`–≠–ª–µ–º–µ–Ω—Ç —Å ID ${inputId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`)
      return
    }

    textInput.addEventListener('keypress', (event) => {
      if (event.key === 'Enter') {
        processTextInput(inputId, textInput)
      }
    })

    const addButtons = document.querySelectorAll(
      '.A_IcebergContentInputsItemFieldAddBtn'
    )
    if (addButtons[index]) {
      addButtons[index].addEventListener('click', () => {
        processTextInput(inputId, textInput)
      })
    } else {
      console.error(`–ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è ${inputId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (—É–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–π —Ç–µ–∫—Å—Ç)
  function addUndoHandler(undoId, inputId) {
    const undoButton = document.getElementById(undoId)
    if (!undoButton) {
      console.error(`–≠–ª–µ–º–µ–Ω—Ç —Å ID ${undoId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`)
      return
    }

    undoButton.addEventListener('click', () => {
      if (textGroups[inputId] && textGroups[inputId].length > 0) {
        textGroups[inputId].pop() // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–ø—É—Ç–∞
        redrawTexts()
      }
    })
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–µ–ø–µ—Ä—å —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç input –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π)
  function addUploadHandler(uploadBtnId) {
    const uploadPicEl = document.getElementById(uploadBtnId)
    if (!uploadPicEl) {
      console.error(`–≠–ª–µ–º–µ–Ω—Ç —Å ID ${uploadBtnId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`)
      return
    }

    uploadPicEl.addEventListener('click', () => {
      input.elt.value = '' // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
      input.elt.dataset.target = uploadBtnId // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–Ω–æ–ø–∫–∏ –≤ dataset
      input.elt.click()
    })
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
  function processTextInput(inputId, textInput) {
    let userText = textInput.value.toUpperCase().trim()
    if (userText.length > 0) {
      let level = parseInt(inputId.replace('icebergInput0', ''), 10) // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∏–Ω–ø—É—Ç–∞ (1-7)
      let offsetY = (level - 1) * 71 // –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –≤–Ω–∏–∑ (–∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å +71px)

      let newTextPosition = getValidPosition(
        userText,
        textGroups[inputId] || [],
        p,
        offsetY
      )
      if (newTextPosition) {
        if (!textGroups[inputId]) {
          textGroups[inputId] = []
        }

        textGroups[inputId].push({
          text: userText,
          x: newTextPosition.x,
          y: newTextPosition.y
        })

        textInput.value = ''
        redrawTexts()
      } else {
        alert('–£–≤—ã, –∑–¥–µ—Å—å –±–æ–ª—å—à–µ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è')
      }
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
  function redrawTexts() {
    p.clear()
    p.image(icebergImg, 0, 0)

    if (userImg) {
      let x = icebergImg.width - userImg.width
      let y = 0
      p.image(userImg, x, y)
    }

    Object.values(textGroups).forEach((group) => {
      group.forEach((t) => {
        p.textFont(myFont)
        p.textSize(9)
        p.textStyle(p.ITALIC)
        p.textAlign(p.LEFT, p.TOP)

        for (let i = 8; i > 0; i--) {
          let alpha = 60 - i * 5
          p.fill(0, 0, 0, alpha)
          p.noStroke()
          p.text(t.text, t.x + i, t.y + i)
          p.text(t.text, t.x - i, t.y - i)
        }

        p.fill(255, 255, 0)
        p.stroke(255, 0, 0)
        p.strokeWeight(2)
        p.text(t.text, t.x, t.y)
      })
    })
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
  function getValidPosition(text, textGroup, p, offsetY = 0) {
    let maxAttempts = 20
    let textWidth = p.textWidth(text) + 10
    let textHeight = 16

    for (let i = 0; i < maxAttempts; i++) {
      let x = p.random(0, p.width - textWidth - 66)
      let y = p.random(offsetY, offsetY + 66 - textHeight) // –°–º–µ—â–∞–µ–º –≤–Ω–∏–∑

      if (
        !textGroup.some(
          (t) =>
            x < t.x + textWidth &&
            x + textWidth > t.x &&
            y < t.y + textHeight &&
            y + textHeight > t.y
        )
      ) {
        return { x, y }
      }
    }
    return null
  }

  // üî• –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
  const copyButton = document.getElementById('icebergCopy')
  if (copyButton) {
    copyButton.addEventListener('click', () => {
      p.canvas.toBlob((blob) => {
        const item = new ClipboardItem({ 'image/png': blob })
        navigator.clipboard
          .write([item])
          .then(() => {
            alert('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞')
          })
          .catch((err) => {
            console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err)
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
          })
      })
    })
  } else {
    console.error('–≠–ª–µ–º–µ–Ω—Ç —Å ID icebergCopy –Ω–µ –Ω–∞–π–¥–µ–Ω.')
  }
}

window.addEventListener('DOMContentLoaded', () => {
  new p5(sketch)
})
